initSidebarItems({"fn":[["normalized_sample","Normalized Weighted Sampling Returns the index of the element sampled according to the weights provided. Uses optimized sampling if `optimize` set to true. Setting `optimize` to true exacerbates timing channels.  ## Arguments   * `weights`: the set of weights to use for sampling; all weights must be positive,                 zero-weight elements are not permitted.   * `arithmetic_config`: the arithmetic config specifying precision   * `rng`: source of randomness.   * `optimize`: whether to optimize sampling, introducing a timing channel and an error condition                 side channel. ## Returns Returns an index of an element sampled according to the weights provided. If the precision of the provided ArithmeticConfig is insufficient for sampling, the method returns an error. Note that errors are not returned on inexact arithmetic, and the caller is responsible for calling `enter_exact_scope()` and  `exit_exact_scope()` to monitor inexact arithmetic."],["randomized_round","Randomized Rounding ## Arguments   * `x`: the value to round   * `arithmetic_config`: the arithmetic configuration to use ## Returns `x` rounded to the nearest smaller or larger integer by drawing a random value `rho` in `[0,1]` and rounding up if `rho > x_fract`, rounding down otherwise."]],"struct":[["ArithmeticConfig","The exact arithmetic configuration. Includes the precision of all mechanism arithmetic and status bits indicating if any inexact arithmetic has been performed. The ArithmeticConfig implementation encapsulates all `unsafe` calls to `mpfr`."]]});